from Crypto.Util.number import long_to_bytes
from sage.all import GF, Integer, ZZ, crt, gcd, sqrt

m = 4
e = 150953688
n = 373824666550208932851344358703053061405262438259996622188837935528607451817812480600479188884096072016823491996056842120586016323642383543231913508464973502962030059403443181467594283936168384790367731793997013711256520780338341018619858240958105689126133812557401122953030695509876185592917323138313818881164334490044163316692588337720342646339764174333821950301279825316497898035760524780198230860089280791887363472060435443944632303774987556026740232641561706904946900169858650106994947597642013168757868017723456208796677559254390940651802333382820063200360490892131573853635471525711894510477078934343423255983
enc = 275574424285842306309073814038154403551700455145115884031072340378743712325975683329051874910297915882286569143815715537085387363420246497061870251520240399514896001311724695996978111559476733709139080970977190150345474341853495386364275702356438666152069791355990718058189043717952080875207858163490627801836274404446661613239167700736337269924479349700031535265765885064606399858172168036794462235707003475360358004643720927563261787867952228496769300443415094124132722170498229611285689671203272698693505808912907778910378274197503048226322090611405601517624884408718689404556983397217070272851442351897456769883


def solve_quadratic(a: int, b: int, c: int) -> tuple[int, int]:
    d = b ** 2 - 4 * a * c
    r1 = (-b + sqrt(d)) // (2 * a)
    r2 = (-b - sqrt(d)) // (2 * a)
    return r1, r2


def main():
    ab, _ = Integer(n).nth_root(4, truncate_mode=True)
    sa4, rb4 = solve_quadratic(1, (n - e) % (ab ** 4), e * ab ** 4)
    a, b = gcd(sa4, ab), gcd(rb4, ab)

    r, s = abs(rb4) // b ** 4, abs(sa4) // a ** 4
    assert r * s == e

    p, q = a ** 4 + r, b ** 4 + s
    assert p * q == n

    print(f"{p=}")
    print(f"{q=}")

    phi = (p - 1) * (q - 1)
    print(gcd(e, phi))  # 10728

    for mp in GF(p)(enc).nth_root(e, all=True):
        for mq in GF(q)(enc).nth_root(e, all=True):
            m = long_to_bytes(crt([ZZ(mp), ZZ(mq)], [p, q]))
            if m.startswith(b"CCTF{"):
                print(m.decode())
                return

if __name__ == "__main__":
    main()
    # CCTF{S!mP1E_A7t4cK_0n_SpEc1aL-5trucTur3D_RSA_pR1me5!}
